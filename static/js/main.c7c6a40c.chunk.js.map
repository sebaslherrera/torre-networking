{"version":3,"sources":["mentor/pages/Mentors.js","skills/pages/Skills.js","user/pages/User.js","App.js","serviceWorker.js","index.js"],"names":["Mentors","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","image","width","height","img","display","maxHeight","props","Fragment","Grid","container","mentors","map","mentor","useStyles","Skills","classes","useState","setMentors","getMentors","e","a","preventDefault","skill","currentTarget","value","Axios","get","response","data","console","log","Box","justifyContent","alignItems","mb","Paper","m","bgcolor","variant","className","Container","Typography","color","align","skills","item","xs","sm","xl","key","id","Button","size","onClick","name","User","username","setUsername","setSkills","getSkills","noValidate","autoComplete","onSubmit","TextField","label","onChange","target","trim","autoFocus","type","offset","mixins","toolbar","App","AppBar","style","backgroundColor","Toolbar","path","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7c6a40c.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\nimport Button from \"@material-ui/core/Button\";\n//import Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: \"auto\",\n    maxWidth: 500,\n  },\n  image: {\n    width: 128,\n    height: 128,\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n  },\n}));\n\nconst CardComplex = (props) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Paper variant=\"outlined\" className={classes.paper}>\n        <Grid container spacing={2}>\n          <Grid item>\n            <ButtonBase className={classes.image}>\n              <img className={classes.img} alt=\"Avatar\" src={props.picture} />\n            </ButtonBase>\n          </Grid>\n          <Grid item xs={12} sm container>\n            <Grid item xs container direction=\"column\" spacing={2}>\n              <Grid item xs>\n                <Typography gutterBottom variant=\"subtitle1\">\n                  {props.name}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                  {props.username}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  {props.professionalHeadline}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body2\" style={{ cursor: \"pointer\" }}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"small\"\n                    onClick={() => {\n                      const URL = `https://torre.co/en/messenger/conversations/${props.id}`;\n                      window.open(URL, \"_blank\");\n                    }}\n                  >\n                    Say Hi!\n                  </Button>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"caption\" align=\"right\">\n                {props.locationName}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nconst Mentors = (props) => {\n  return (\n    <React.Fragment>\n      {/* <Container maxWidth=\"lg\"> */}\n      <Grid container spacing={3}>\n        {props.mentors &&\n          props.mentors.map((mentor) => {\n            return (\n              /*<li key={mentor.subjectId} id={mentor.subjectId}>\n                {mentor.username}\n              </li> */\n\n              <Grid\n                item\n                xs={3}\n                sm={3}\n                key={mentor.subjectId}\n                id={mentor.subjectId}\n              >\n                <CardComplex\n                  username={mentor.username}\n                  name={mentor.name}\n                  picture={mentor.picture}\n                  professionalHeadline={mentor.professionalHeadline}\n                  id={mentor.subjectId}\n                  locationName={mentor.locationName}\n                />\n              </Grid>\n            );\n          })}\n      </Grid>\n      {/* </Container> */}\n    </React.Fragment>\n  );\n};\n\nexport default Mentors;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Axios from \"axios\";\nimport Box from \"@material-ui/core/Box\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Mentors from \"../../mentor/pages/Mentors\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(5),\n      width: \"150ch\",\n    },\n  },\n}));\n\nconst Skills = (props) => {\n  const classes = useStyles();\n  const [mentors, setMentors] = useState(null);\n\n  const getMentors = async (e) => {\n    e.preventDefault();\n    const skill = e.currentTarget.value;\n    if (skill) {\n      try {\n        const response = await Axios.get(\n          `http://ec2-54-90-206-133.compute-1.amazonaws.com:5000/api/mentor/${skill}`\n        );\n        setMentors(response.data);\n        console.log(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        padding={1}\n        mb={5}\n      >\n        <Paper\n          m=\"auto\"\n          bgcolor=\"lightblue\"\n          variant=\"outlined\"\n          className={classes.root}\n        >\n          <Container>\n            <Typography variant=\"h4\" color=\"textPrimary\" align=\"center\" mb={5}>\n              Choose a specific field and get mentorship from the most skilled\n              talents\n            </Typography>\n            <Grid container spacing={3}>\n              {props.skills &&\n                props.skills.map((skill) => {\n                  return (\n                    <Grid item xs={3} sm={3} xl={3} key={skill.id}>\n                      <Button\n                        size=\"medium\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        onClick={getMentors}\n                        value={skill.name}\n                      >\n                        {skill.name}\n                      </Button>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Container>\n        </Paper>\n      </Box>\n      <Mentors mentors={mentors} />\n    </React.Fragment>\n  );\n};\n\nexport default Skills;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Axios from \"axios\";\n\nimport Skills from \"../../skills/pages/Skills\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(5),\n      width: \"25ch\",\n    },\n  },\n}));\n\nconst User = () => {\n  const classes = useStyles();\n  const [username, setUsername] = useState(null);\n  const [skills, setSkills] = useState(null);\n\n  const handleUsername = (e) => {\n    if (!e.target.value.trim()) return;\n    setUsername(e.target.value);\n    //setMentors(null);\n  };\n\n  const getSkills = async (e) => {\n    e.preventDefault();\n    if (username) {\n      try {\n        const response = await Axios.get(\n          `http://ec2-54-90-206-133.compute-1.amazonaws.com:5000/api/${username}`\n        );\n        setSkills(response.data);\n        console.log(skills); //watch\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        padding={1}\n        mb={5}\n      >\n        <Paper m=\"auto\" bgcolor=\"lightblue\">\n          <form\n            className={classes.root}\n            noValidate\n            autoComplete=\"off\"\n            onSubmit={getSkills}\n          >\n            <TextField\n              id=\"standard-basic\"\n              label=\"Username of Torre\"\n              name=\"username\"\n              onChange={handleUsername}\n              autoFocus\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              name=\"username\"\n              type=\"submit\"\n            >\n              Search Mentors\n            </Button>\n          </form>\n        </Paper>\n      </Box>\n      {skills && <Skills skills={skills} />}\n    </React.Fragment>\n  );\n};\n\nexport default User;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./App.css\";\n\nimport User from \"./user/pages/User\";\n\nconst useStyles = makeStyles((theme) => ({\n  offset: theme.mixins.toolbar,\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Router>\n      <AppBar style={{ backgroundColor: \"#27292D\" }}>\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            Torre Networking\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.offset} />\n      <main>\n        <Switch>\n          <Route path=\"/\" exact>\n            <User />\n          </Route>\n          <Redirect to=\"/\" />\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}